opam-version: "2.0"

synopsis: "Code coverage for OCaml"
version: "2.4.0"
license: "MIT"
homepage: "https://github.com/aantron/bisect_ppx"
doc: "https://github.com/aantron/bisect_ppx"
bug-reports: "https://github.com/aantron/bisect_ppx/issues"

dev-repo: "git+https://github.com/aantron/bisect_ppx.git"
authors: [
  "Xavier Clerc <bisect@x9c.fr>"
  "Leonid Rozenberg <leonidr@gmail.com>"
  "Anton Bachin <antonbachin@yahoo.com>"
]
maintainer: [
  "Anton Bachin <antonbachin@yahoo.com>"
  "Leonid Rozenberg <leonidr@gmail.com>"
]

depends: [
  "base-unix"
  "cmdliner-windows" {>= "1.0.0"}
  "dune"
  "ocaml" {>= "4.02.0"}
  "ocaml-windows"
  "ocaml-migrate-parsetree-windows" {>= "1.5.0"}
  "ppx_tools_versioned-windows" {>= "5.3.0"}

  "ocamlfind-windows" {with-test}
  "ounit2-windows" {with-test}
]

build: [
  ["dune" "build" "-p" "bisect_ppx" "-j" jobs "-x" "windows"]
  ["dune" "runtest" "-p" "bisect_ppx" "-x" "windows"] {with-test}
]

post-messages: [
  "Bisect_ppx 2.0.0 has deprecated some command-line options. See
  https://github.com/aantron/bisect_ppx/releases/tag/2.0.0"
]

description: "Bisect_ppx helps you test thoroughly. It is a small preprocessor
that inserts instrumentation at places in your code, such as if-then-else and
match expressions. After you run tests, Bisect_ppx gives a nice HTML report
showing which places were visited and which were missed.

Usage is simple - add package bisect_ppx when building tests, run your tests,
then run the Bisect_ppx report tool on the generated visitation files."

url {
  src: "https://github.com/aantron/bisect_ppx/archive/2.4.0.tar.gz"
  checksum: "md5=47aa96e9980a5bb10ab7b4f475728877"
}
